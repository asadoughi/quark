# Copyright 2014 Openstack Foundation
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

from collections import namedtuple
from oslo.config import cfg

from neutron.common import config
from neutron.db import api as neutron_db_api

from quark.db import models
from quark.db import api as db_api

from sqlalchemy import or_, func

import netaddr
import sys


def main():
    config.init(sys.argv[1:])
    if not cfg.CONF.config_file:
        sys.exit(_("ERROR: Unable to find configuration file via the default"
                   " search paths (~/.neutron/, ~/, /etc/neutron/, /etc/) and"
                   " the '--config-file' option!"))

    neutron_db_api.configure_db()
    neutron_db_api.register_models(base=models.BASEV2)
    do(neutron_db_api.get_session())


def _rackspace_filter(query):
    private = '11111111-1111-1111-1111-111111111111'
    public = '00000000-0000-0000-0000-000000000000'
    query = query.filter(or_(models.Subnet.network_id == private,
                             models.Subnet.network_id == public))
    return query


def do(session):
    # 1. get subnets with next_auto_assign_ip < first_ip or next_auto_assign_ip
    #    > last_ip along with the number of IPs they have in the DB
    with session.begin():
        query = session.query(
            models.Subnet,
            func.count(models.IPAddress.id).label("count"))
        query = query.filter(models.Subnet.id == models.IPAddress.subnet_id)
        query = query.filter(or_(models.Subnet.do_not_use == None,
                                 models.Subnet.do_not_use == 0))
        query = _rackspace_filter(query)
        query = query.filter(
            or_(models.Subnet.next_auto_assign_ip < models.Subnet.first_ip,
                models.Subnet.next_auto_assign_ip > models.Subnet.last_ip))
        query = query.group_by(models.Subnet.id)
        query = query.order_by("count desc")
        subnets = query.all()

    # 2. figure out which subnets to update
    print "Matching subnets...", len(subnets)
    subnets_to_update = []
    for subnet, count in subnets:
        with session.begin():
            ipp = models.IPPolicy.get_ip_policy_cidrs(subnet)
            res = netaddr.IPSet(netaddr.IPNetwork(subnet._cidr)) - ipp
            if count != res.size:
                subnets_to_update.append(subnet)

    # 3. figure out first non-entered ip for each subnet, set
    #    next_auto_assign_ip to it
    print "Subnets to update...", len(subnets_to_update)
    for subnet in subnets_to_update:
        with session.begin():
            query = session.query(models.IPAddress.address)
            query = query.filter(subnet.id == models.IPAddress.subnet_id)

            def _map(addr):
                ip = netaddr.IPAddress(addr[0])
                if subnet.ip_version == 4:
                    return ip.ipv4()
                return ip
            addrs = [_map(addr) for addr in query.all()]
            ipp = models.IPPolicy.get_ip_policy_cidrs(subnet)
            s = netaddr.IPNetwork(subnet.cidr)
            y = netaddr.IPSet(s) - ipp - netaddr.IPSet(addrs)
            try:
                next_ip = int(iter(y).next().ipv6())
            except StopIteration:
                next_ip = None

            if next_ip:
                print subnet.id, subnet.cidr, netaddr.IPAddress(next_ip),
                print y.size, subnet.next_auto_assign_ip
                context = namedtuple('Context', ['session'])(session=session)
                # db_api.subnet_update(context, subnet,
                #                     next_auto_assign_ip=next_ip)

if __name__ == "__main__":
    main()
